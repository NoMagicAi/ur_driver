# Copyright 2018 NoMagic Sp. z o.o.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
    
    def follow_joint_trajectory():
        global JOINT_NUM               = 6
        global POSITIONS_OFFSET        = 0
        global VELOCITIES_OFFSET       = JOINT_NUM
        global TIME_OFFSET             = 2 * JOINT_NUM
        global TIME_INTERVAL           = {{TIME_INTERVAL}}
        global SERVOJ_TIME             = {{SERVOJ_TIME}}
        global EMPTY_VALUES            = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        global SERVOJ_GAIN             = {{SERVOJ_GAIN}}
        global SERVOJ_LOOKAHEAD_TIME   = {{SERVOJ_LOOKAHEAD_TIME}}
        global MAX_JOINT_DIFFERENCE    = {{MAX_JOINT_DIFFERENCE}}
        global total_elapsed_time = 0
        global previous_end_time = 0.0
        global previous_positions = get_actual_joint_positions()
        global previous_velocities = EMPTY_VALUES

        def is_waypoint_sentinel(positions, velocities, time):
            def has_only_zeros(l):
                i = 0
                while i < length(l):
                    if l[i] != 0.0:
                        return False
                    end
                    i = i + 1
                end
                return True
            end
            return has_only_zeros(positions) and has_only_zeros(velocities) and time == 0.0
        end

        def is_final_position_reached(position):
            current_position = get_actual_joint_positions()
            index = 0
            while index < JOINT_NUM:
                if norm(position[index] - current_position[index]) > MAX_JOINT_DIFFERENCE:
                    textmsg("Too big joint diff ", norm(position[index] - current_position[index]))
                    return False
                end
                index = index + 1
            end
            return True
        end

        def interpolate(time_within_segment, total_segment_time, start_pos, end_pos, start_vel, end_vel):
            local a = start_pos
            local b = start_vel
            local c = (-3 * a + 3 * end_pos - 2 * total_segment_time * b - total_segment_time * end_vel) / pow(total_segment_time, 2)
            local d = (2 * a - 2 * end_pos + total_segment_time * b + total_segment_time * end_vel) / pow(total_segment_time, 3)
            return a + b * time_within_segment + c * pow(time_within_segment, 2) + d * pow(time_within_segment, 3)
        end

        def set_expected_waypoint_index(index):
            write_output_integer_register(1, index)
        end

        def get_waypoint_index():
            return read_input_integer_register(1)
        end

        def get_positions():
            positions = EMPTY_VALUES
            i = 0
            while i < JOINT_NUM:
                positions[i] = read_input_float_register(POSITIONS_OFFSET + i)
                i = i + 1
            end
            return positions
        end

        def get_velocities():
            velocities = EMPTY_VALUES
            i = 0
            while i < JOINT_NUM:
                velocities[i] = read_input_float_register(VELOCITIES_OFFSET + i)
                i = i + 1
            end
            return velocities
        end

        def get_time():
            return read_input_float_register(TIME_OFFSET)
        end

        def move_robot(target_positions, target_velocities, segment_end_time):
            new_position = get_actual_joint_positions()
            if segment_end_time > 0:
                segment_start_time = previous_end_time
                segment_total_time = segment_end_time - segment_start_time
                while total_elapsed_time <= segment_end_time:
                    segment_elapsed_time = total_elapsed_time - segment_start_time
                    j = 0
                    while j < JOINT_NUM:
                        new_position[j] = interpolate(segment_elapsed_time, segment_total_time, previous_positions[j], target_positions[j], previous_velocities[j], target_velocities[j])
                        j = j + 1
                    end
                    servoj(new_position, t={{SERVOJ_TIME}}, lookahead_time={{SERVOJ_LOOKAHEAD_TIME}}, gain={{SERVOJ_GAIN}})
                    total_elapsed_time = total_elapsed_time + TIME_INTERVAL
                end

                while not is_final_position_reached(new_position):
                    servoj(new_position, t={{SERVOJ_TIME}}, lookahead_time={{SERVOJ_LOOKAHEAD_TIME}}, gain={{SERVOJ_GAIN}})
                end
            end

            previous_end_time = segment_end_time
            previous_positions = target_positions
            previous_velocities = target_velocities
            return new_position
        end

        # As the default register value is 0, we use 1-based indexing to avoid misterpretting registers.
        expected_waypoint_index = 1
        set_expected_waypoint_index(expected_waypoint_index)
        last_position = get_actual_joint_positions()
        while True:
            # Wait for the next waypoint
            textmsg("Waiting for waypoint ", expected_waypoint_index)
            if get_waypoint_index() == expected_waypoint_index:
                textmsg("Received waypoint ", expected_waypoint_index)
                # Copy waypoint data
                positions = get_positions()
                velocities = get_velocities()
                time = get_time()
                if is_waypoint_sentinel(positions, velocities, time):
                    textmsg("Received sentinel waypoint")
                    stopj(1.4)
                    break
                else:
                    textmsg("Waypoint data:")
                    textmsg("  positions=", positions)
                    textmsg("  velocities=", velocities)
                    textmsg("  time=", time)
                end
                # Set the next expected waypoint number
                expected_waypoint_index = expected_waypoint_index + 1
                set_expected_waypoint_index(expected_waypoint_index)
                textmsg("Increased expected waypoint index to ", expected_waypoint_index)
                # Move robot to new target; this might take some time...
                last_position = move_robot(positions, velocities, time)
            end
            servoj(last_position, t={{SERVOJ_TIME}}, lookahead_time={{SERVOJ_LOOKAHEAD_TIME}}, gain={{SERVOJ_GAIN}})
        end

        textmsg("Finish follow joint trajectory")
    end
